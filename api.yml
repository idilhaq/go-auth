# This is the OpenAPI specification for your service. It is used to generate the client code.
# To generate the server code, use the Gradle task `openApiGenerate`. The 
# generated code will be placed in `build/generate-resources/main`.
#
# We will evaluate you based on how well you design your API.
# 1. How well it follows REST principles.
# 2. How easy it is to understand and use.
#
# References
# 1. https://swagger.io/specification/
openapi: "3.0.0"
info:
  version: 1.0.0
  title: User Service
  license:
    name: MIT
servers:
  - url: http://localhost
paths:
  /register:
    post:
      summary: Register user.
      requestBody:
        content:
            application/json:    
              schema:
                $ref: "#/components/schemas/RegistrationRequest"
      responses:
        '200':
          description: OK
          content:
            application/json:    
              schema:
                $ref: "#/components/schemas/RegistrationResponse"
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /login:
    post:
      summary: User login.
      requestBody:
        content:
            application/json:    
              schema:
                $ref: "#/components/schemas/LoginRequest"
      responses:
        '200':
          description: OK
          content:
            application/json:    
              schema:
                $ref: "#/components/schemas/LoginResponse"
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /user/{id}:
    parameters:
      - name: id
        in: path
        description: ID of user
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
    get:
      summary: Get user info.
      responses:
        '200':
          description: Test return
          content:
            application/json:    
              schema:
                $ref: "#/components/schemas/UserInfoResponse"
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    patch:
      summary: Update user profile.
      requestBody:
        content:
            application/json:    
              schema:
                $ref: "#/components/schemas/UserInfoRequest"
      responses:
        '200':
          description: OK
          content:
            application/json:    
              schema:
                $ref: "#/components/schemas/UserInfoResponse"
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
components:
  schemas:
    RegistrationRequest:
      type: object
      required:
        - phone_number
        - full_name
        - password
      properties:
        phone_number:
          type: string
        full_name:
          type: string
        password:
          type: string
    RegistrationResponse:
      type: object
      properties:
        id:
          type: integer
    LoginRequest:
      type: object
      required:
        - phone_number
        - password
      properties:
        phone_number:
          type: string
        password:
          type: string
    LoginResponse:
      type: object
      properties:
        id:
          type: integer
        jwt_token:
          type: string
    UserInfoRequest:
      type: object
      required:
        - phone_number
        - full_name
        - password
      properties:
        phone_number:
          type: string
        full_name:
          type: string
        password:
          type: string
    UserInfoResponse:
      type: object
      properties:
        phone_number:
          type: string
        full_name:
          type: string
    ErrorResponse:
      type: object
      required:
        - message
      properties:
        message:
          type: string
